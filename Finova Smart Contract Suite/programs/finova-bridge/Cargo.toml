 // programs/finova-bridge/Cargo.toml
 
 [package]
name = "finova-bridge"
version = "1.0.0"
description = "Finova Network Cross-Chain Bridge Smart Contract - Enabling seamless token transfers across multiple blockchains"
authors = [
    "Finova Network Team <dev@finova.network>",
    "Blockchain Engineering <blockchain@finova.network>"
]
repository = "https://github.com/finova-network/finova-contracts"
homepage = "https://finova.network"
documentation = "https://docs.finova.network/bridge"
license = "MIT"
readme = "README.md"
keywords = ["blockchain", "bridge", "cross-chain", "solana", "defi"]
categories = ["cryptography", "network-programming", "web-programming"]
edition = "2021"
rust-version = "1.75"

[lib]
crate-type = ["cdylib", "lib"]
name = "finova_bridge"

[[bin]]
name = "finova-bridge-cli"
path = "src/bin/cli.rs"
required-features = ["cli"]

[features]
default = ["anchor-lang/default"]
# Development features
dev = ["anchor-lang/dev"]
cli = ["clap", "tokio"]
# Testing features
testing = ["anchor-lang/testing", "proptest", "arbitrary"]
# Security features
security-audit = ["audit"]
formal-verification = ["kani"]
# Performance features
simd = ["sha2/asm", "ed25519-dalek/simd_backend"]
# Network features
mainnet = []
testnet = []
devnet = ["dev"]
# Integration features
wormhole = ["wormhole-anchor-sdk"]
layerzero = ["layerzero-solana"]
# Monitoring features
metrics = ["prometheus", "tracing-prometheus"]
# Advanced cryptography
advanced-crypto = ["bulletproofs", "merlin", "curve25519-dalek"]

[dependencies]
# Core Anchor Framework
anchor-lang = { version = "0.29.0", features = ["init-if-needed", "derive"] }
anchor-spl = { version = "0.29.0", features = ["metadata"] }

# Solana Core Dependencies
solana-program = "~1.17.0"
solana-sdk = "~1.17.0"
spl-token = { version = "4.0.0", features = ["no-entrypoint"] }
spl-associated-token-account = { version = "2.2.0", features = ["no-entrypoint"] }

# Cryptography & Security
sha2 = { version = "0.10.8", features = ["asm"] }
sha3 = "0.10.8"
keccak = "0.1.4"
blake3 = "1.5.0"
ed25519-dalek = { version = "2.0.0", features = ["rand_core", "serde"] }
curve25519-dalek = { version = "4.1.1", features = ["serde"] }
x25519-dalek = { version = "2.0.0", features = ["serde", "static_secrets"] }

# Merkle Tree & Proof Systems
merkle-tree-rs = "0.1.0"
sparse-merkle-tree = "0.7.0"
bulletproofs = { version = "4.0.0", optional = true }
merlin = { version = "3.0.0", optional = true }

# Serialization & Data Handling
borsh = { version = "1.3.1", features = ["derive"] }
serde = { version = "1.0.195", features = ["derive"] }
serde_json = "1.0.111"
bincode = "1.3.3"
bytemuck = { version = "1.14.0", features = ["derive"] }

# Numerical & Mathematical Operations
num-traits = { version = "0.2.17", features = ["libm"] }
num-bigint = { version = "0.4.4", features = ["serde"] }
uint = { version = "0.9.5", features = ["byteorder"] }

# Error Handling & Utilities
thiserror = "1.0.56"
anyhow = "1.0.79"
static_assertions = "1.1.0"

# Cross-Chain Integration
wormhole-anchor-sdk = { version = "0.2.0", optional = true }
layerzero-solana = { version = "0.1.0", optional = true }

# Time & Temporal Operations
chrono = { version = "0.4.31", features = ["serde"] }

# Logging & Monitoring (optional for on-chain use)
log = "0.4.20"
tracing = { version = "0.1.40", optional = true }
tracing-prometheus = { version = "0.1.0", optional = true }
prometheus = { version = "0.13.3", optional = true }

# Development & Testing Dependencies
[dev-dependencies]
# Testing Framework
anchor-client = "0.29.0"
solana-program-test = "~1.17.0"
solana-validator = "~1.17.0"
tokio = { version = "1.35.1", features = ["full"] }

# Property-based Testing
proptest = { version = "1.4.0", optional = true }
arbitrary = { version = "1.3.2", features = ["derive"], optional = true }

# Fuzzing
honggfuzz = "0.5.56"
afl = "0.13.4"

# Benchmarking
criterion = { version = "0.5.1", features = ["html_reports"] }

# Mocking & Test Utilities
mockall = "0.12.1"
serial_test = "3.0.0"
tempfile = "3.8.1"
rand = { version = "0.8.5", features = ["std_rng"] }
rand_chacha = "0.3.1"

# CLI Dependencies (optional)
clap = { version = "4.4.11", features = ["derive"], optional = true }

# Security Audit Tools (optional)
audit = { version = "0.1.0", optional = true }
kani = { version = "0.1.0", optional = true }

[build-dependencies]
# Build-time code generation
anchor-syn = "0.29.0"
proc-macro2 = "1.0.76"
quote = "1.0.35"
syn = { version = "2.0.48", features = ["full"] }

# Build configuration
vergen = { version = "8.2.6", features = ["build", "cargo", "git", "rustc"] }

[profile.dev]
# Development profile optimized for fast compilation
opt-level = 0
debug = true
debug-assertions = true
overflow-checks = true
lto = false
panic = "unwind"
incremental = true
codegen-units = 256
rpath = false

[profile.test]
# Testing profile with optimizations for faster test execution
opt-level = 2
debug = true
debug-assertions = true
overflow-checks = true
lto = false
panic = "unwind"
incremental = true
codegen-units = 256

[profile.release]
# Production release profile with maximum optimizations
opt-level = 3
debug = false
debug-assertions = false
overflow-checks = false
lto = "fat"
panic = "abort"
incremental = false
codegen-units = 1
rpath = false
strip = "symbols"

[profile.release-with-debug]
# Release profile with debug symbols for production debugging
inherits = "release"
debug = true
strip = "none"

[profile.bench]
# Benchmarking profile
opt-level = 3
debug = false
debug-assertions = false
overflow-checks = false
lto = "fat"
panic = "abort"
incremental = false
codegen-units = 1

# Patch dependencies for security and compatibility
[patch.crates-io]
# Ensure we use secure versions of cryptographic libraries
ed25519-dalek = { version = "2.0.0" }
curve25519-dalek = { version = "4.1.1" }

# Custom registry for internal dependencies (if needed)
[patch."https://github.com/finova-network"]
finova-common = { path = "../common" }

# Workspace configuration
[workspace]
# This is managed by the root workspace
# See ../../Cargo.toml for workspace configuration

# Package metadata for enhanced tooling
[package.metadata]
# Security audit configuration
audit = { ignore = [] }

# Documentation configuration
docs = { features = ["default"], no-default-features = false }

# Cross-compilation targets
cross = { targets = ["x86_64-unknown-linux-gnu", "aarch64-unknown-linux-gnu"] }

# Cargo-deny configuration reference
[package.metadata.deny]
# Licensing requirements
licenses = ["MIT", "Apache-2.0", "BSD-2-Clause", "BSD-3-Clause", "ISC"]
# Security advisories
advisories = { ignore = [] }
# Dependency sources
sources = { unknown-registry = "deny", unknown-git = "deny" }

# Cargo-audit configuration
[package.metadata.audit]
# Ignore specific advisories (use with caution)
ignore = []

# Cargo-machete configuration (unused dependency detection)
[package.metadata.machete]
# Directories to ignore
ignored = ["benches", "examples"]

# Additional build configuration
[[bin]]
name = "bridge-validator"
path = "src/bin/validator.rs"
required-features = ["cli", "wormhole"]

[[bin]]
name = "bridge-relayer"
path = "src/bin/relayer.rs"
required-features = ["cli", "layerzero"]

[[example]]
name = "basic_bridge"
path = "examples/basic_bridge.rs"

[[example]]
name = "advanced_bridge"
path = "examples/advanced_bridge.rs"
required-features = ["wormhole", "layerzero"]

[[bench]]
name = "bridge_performance"
harness = false

[[bench]]
name = "crypto_operations"
harness = false

# Integration test configuration
[[test]]
name = "integration_tests"
path = "tests/integration.rs"

[[test]]
name = "security_tests"
path = "tests/security.rs"
required-features = ["testing"]

[[test]]
name = "cross_chain_tests"
path = "tests/cross_chain.rs"
required-features = ["testing", "wormhole", "layerzero"]

 