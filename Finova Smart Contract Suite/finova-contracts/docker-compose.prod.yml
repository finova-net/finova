version: '3.8'

# Finova Network - Production Docker Compose
# Enterprise-grade deployment with security, monitoring, and high availability
# Version: 1.0 | Production Ready

networks:
  finova-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
  finova-internal:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
  finova-monitoring:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/16

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/finova/data/postgres
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/finova/data/redis
  elasticsearch-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/finova/data/elasticsearch
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/finova/data/prometheus
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/finova/data/grafana
  nginx-certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/finova/certs
  backup-storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/finova/backups

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  blockchain_private_key:
    file: ./secrets/blockchain_private_key.txt
  solana_rpc_url:
    file: ./secrets/solana_rpc_url.txt
  openai_api_key:
    file: ./secrets/openai_api_key.txt
  social_api_keys:
    file: ./secrets/social_api_keys.json
  ssl_cert:
    file: ./secrets/ssl_cert.pem
  ssl_key:
    file: ./secrets/ssl_key.pem

services:
  # =============================================================================
  # REVERSE PROXY & LOAD BALANCER
  # =============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: finova-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-certs:/etc/ssl/certs:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - finova-network
    depends_on:
      - api-gateway
      - web-app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=100m

  # =============================================================================
  # API GATEWAY & CORE SERVICES
  # =============================================================================
  api-gateway:
    image: finova/api-gateway:${FINOVA_VERSION:-latest}
    container_name: finova-api-gateway
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_PORT=5432
      - POSTGRES_DB=finova_production
      - POSTGRES_USER=finova_user
      - REDIS_HOST=redis-cluster
      - REDIS_PORT=6379
      - SOLANA_NETWORK=mainnet-beta
      - JWT_EXPIRES_IN=24h
      - RATE_LIMIT_WINDOW=15
      - RATE_LIMIT_MAX=1000
      - LOG_LEVEL=info
      - ENABLE_CORS=true
      - ALLOWED_ORIGINS=https://app.finova.network,https://api.finova.network
      - SENTRY_DSN=${SENTRY_DSN}
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
    secrets:
      - postgres_password
      - redis_password
      - jwt_secret
      - blockchain_private_key
      - solana_rpc_url
    networks:
      - finova-network
      - finova-internal
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-cluster:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  # Mining Service
  mining-service:
    image: finova/mining-service:${FINOVA_VERSION:-latest}
    container_name: finova-mining-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - SOLANA_NETWORK=mainnet-beta
      - MINING_BATCH_SIZE=1000
      - MINING_INTERVAL=60000
      - MAX_CONCURRENT_MINERS=10000
      - ANTI_BOT_THRESHOLD=0.8
      - REGRESSION_FACTOR=0.001
    secrets:
      - postgres_password
      - redis_password
      - blockchain_private_key
      - solana_rpc_url
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 60s
      timeout: 15s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '6.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # XP Service
  xp-service:
    image: finova/xp-service:${FINOVA_VERSION:-latest}
    container_name: finova-xp-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3002
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - XP_CALCULATION_BATCH_SIZE=500
      - QUALITY_SCORE_THRESHOLD=0.5
      - STREAK_BONUS_MAX=3.0
    secrets:
      - postgres_password
      - redis_password
      - openai_api_key
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Referral Service
  referral-service:
    image: finova/referral-service:${FINOVA_VERSION:-latest}
    container_name: finova-referral-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3003
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - REFERRAL_NETWORK_DEPTH=3
      - MAX_REFERRAL_REWARDS=100000
      - NETWORK_QUALITY_THRESHOLD=0.7
    secrets:
      - postgres_password
      - redis_password
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # NFT Service
  nft-service:
    image: finova/nft-service:${FINOVA_VERSION:-latest}
    container_name: finova-nft-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3004
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - SOLANA_NETWORK=mainnet-beta
      - METAPLEX_PROGRAM_ID=metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s
      - NFT_STORAGE_PROVIDER=ipfs
      - MARKETPLACE_FEE=0.025
    secrets:
      - postgres_password
      - redis_password
      - blockchain_private_key
      - solana_rpc_url
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Social Integration Service
  social-service:
    image: finova/social-service:${FINOVA_VERSION:-latest}
    container_name: finova-social-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3005
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - SUPPORTED_PLATFORMS=instagram,tiktok,youtube,facebook,twitter
      - CONTENT_SYNC_INTERVAL=300000
      - MAX_CONCURRENT_SYNCS=100
    secrets:
      - postgres_password
      - redis_password
      - social_api_keys
      - openai_api_key
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
      - content-analyzer
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G

  # =============================================================================
  # AI & ANALYTICS SERVICES
  # =============================================================================
  content-analyzer:
    image: finova/content-analyzer:${FINOVA_VERSION:-latest}
    container_name: finova-content-analyzer
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/app/models
      - REDIS_HOST=redis-cluster
      - REDIS_PORT=6379
      - BATCH_SIZE=32
      - MAX_WORKERS=4
      - QUALITY_MODEL_VERSION=v2.1
      - ORIGINALITY_MODEL_VERSION=v1.8
    secrets:
      - redis_password
      - openai_api_key
    volumes:
      - ./ai-models:/app/models:ro
    networks:
      - finova-internal
    depends_on:
      - redis-cluster
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 60s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 16G
        reservations:
          cpus: '2.0'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  bot-detection:
    image: finova/bot-detection:${FINOVA_VERSION:-latest}
    container_name: finova-bot-detection
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/app/models
      - REDIS_HOST=redis-cluster
      - REDIS_PORT=6379
      - DETECTION_THRESHOLD=0.8
      - BEHAVIOR_ANALYSIS_WINDOW=86400
      - PATTERN_DETECTION_SENSITIVITY=0.9
    secrets:
      - redis_password
    volumes:
      - ./ai-models:/app/models:ro
    networks:
      - finova-internal
    depends_on:
      - redis-cluster
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 60s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '6.0'
          memory: 12G
        reservations:
          cpus: '1.5'
          memory: 3G

  recommendation-engine:
    image: finova/recommendation-engine:${FINOVA_VERSION:-latest}
    container_name: finova-recommendation-engine
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/app/models
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - RECOMMENDATION_BATCH_SIZE=1000
      - UPDATE_INTERVAL=3600
      - COLLABORATIVE_WEIGHT=0.6
      - CONTENT_WEIGHT=0.4
    secrets:
      - postgres_password
      - redis_password
    volumes:
      - ./ai-models:/app/models:ro
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health')"]
      interval: 60s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G

  # =============================================================================
  # DATABASE CLUSTER
  # =============================================================================
  postgres-primary:
    image: postgres:15.4-alpine
    container_name: finova-postgres-primary
    restart: unless-stopped
    environment:
      - POSTGRES_DB=finova_production
      - POSTGRES_USER=finova_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - POSTGRES_MAX_CONNECTIONS=1000
      - POSTGRES_SHARED_BUFFERS=2GB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=6GB
      - POSTGRES_MAINTENANCE_WORK_MEM=512MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=64MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
      - POSTGRES_RANDOM_PAGE_COST=1.1
      - POSTGRES_EFFECTIVE_IO_CONCURRENCY=200
    secrets:
      - postgres_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - finova-internal
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finova_user -d finova_production"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 16G
        reservations:
          cpus: '2.0'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    security_opt:
      - no-new-privileges:true

  postgres-replica:
    image: postgres:15.4-alpine
    container_name: finova-postgres-replica
    restart: unless-stopped
    environment:
      - POSTGRES_DB=finova_production
      - POSTGRES_USER=finova_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_PRIMARY_HOST=postgres-primary
      - POSTGRES_PRIMARY_PORT=5432
      - POSTGRES_REPLICA_MODE=slave
    secrets:
      - postgres_password
    volumes:
      - ./database/replica:/var/lib/postgresql/data
      - ./database/config/recovery.conf:/etc/postgresql/recovery.conf:ro
    networks:
      - finova-internal
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finova_user -d finova_production"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G

  # =============================================================================
  # REDIS CLUSTER
  # =============================================================================
  redis-cluster:
    image: redis:7.2-alpine
    container_name: finova-redis-cluster
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    secrets:
      - redis_password
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - finova-internal
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # MESSAGE QUEUE & STREAMING
  # =============================================================================
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: finova-kafka
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    networks:
      - finova-internal
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: finova-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_MAX_CLIENT_CNXNS: 1000
    networks:
      - finova-internal
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # SEARCH & ANALYTICS
  # =============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: finova-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=finova-es-node
      - cluster.name=finova-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms4g -Xmx4g"
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      - finova-internal
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: finova-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=finova-kibana
      - SERVER_HOST=0.0.0.0
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    networks:
      - finova-internal
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: finova-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - finova-monitoring
      - finova-internal
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G

  grafana:
    image: grafana/grafana:10.0.3
    container_name: finova-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    secrets:
      - source: postgres_password
        target: grafana_admin_password
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - finova-monitoring
      - finova-internal
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: finova-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    networks:
      - finova-monitoring
      - finova-internal
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # WEB APPLICATION
  # =============================================================================
  web-app:
    image: finova/web-app:${FINOVA_VERSION:-latest}
    container_name: finova-web-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.finova.network
      - NEXT_PUBLIC_WS_URL=wss://api.finova.network
      - NEXT_PUBLIC_SOLANA_NETWORK=mainnet-beta
      - NEXT_PUBLIC_SENTRY_DSN=${SENTRY_DSN}
      - NEXT_PUBLIC_GOOGLE_ANALYTICS=${GA_TRACKING_ID}
    networks:
      - finova-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # =============================================================================
  # MOBILE BACKEND SERVICES
  # =============================================================================
  mobile-api:
    image: finova/mobile-api:${FINOVA_VERSION:-latest}
    container_name: finova-mobile-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3006
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - PUSH_NOTIFICATION_PROVIDER=firebase
      - DEEP_LINK_DOMAIN=finova.app
      - MOBILE_SESSION_TIMEOUT=2592000
      - BIOMETRIC_AUTH_ENABLED=true
    secrets:
      - postgres_password
      - redis_password
      - firebase_service_account
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '3.0'
          memory: 3G
        reservations:
          cpus: '0.8'
          memory: 800M

  push-notification-service:
    image: finova/push-notification-service:${FINOVA_VERSION:-latest}
    container_name: finova-push-notifications
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3007
      - REDIS_HOST=redis-cluster
      - KAFKA_BROKERS=kafka:29092
      - FCM_BATCH_SIZE=500
      - APNS_BATCH_SIZE=500
      - MAX_RETRY_ATTEMPTS=3
    secrets:
      - redis_password
      - firebase_service_account
      - apns_certificates
    networks:
      - finova-internal
    depends_on:
      - redis-cluster
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # =============================================================================
  # BLOCKCHAIN SERVICES
  # =============================================================================
  blockchain-indexer:
    image: finova/blockchain-indexer:${FINOVA_VERSION:-latest}
    container_name: finova-blockchain-indexer
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SOLANA_RPC_URL_FILE=/run/secrets/solana_rpc_url
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - INDEXER_BATCH_SIZE=1000
      - BLOCK_CONFIRMATION_COUNT=32
      - TRANSACTION_TIMEOUT=60000
      - RETRY_ATTEMPTS=5
    secrets:
      - solana_rpc_url
      - postgres_password
      - redis_password
      - blockchain_private_key
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 60s
      timeout: 15s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G

  smart-contract-monitor:
    image: finova/smart-contract-monitor:${FINOVA_VERSION:-latest}
    container_name: finova-contract-monitor
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SOLANA_RPC_URL_FILE=/run/secrets/solana_rpc_url
      - REDIS_HOST=redis-cluster
      - PROGRAM_IDS=FinovaCore11111111111111111111111111111111,FinovaToken1111111111111111111111111111111,FinovaNFT111111111111111111111111111111111
      - ALERT_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - MONITORING_INTERVAL=10000
    secrets:
      - solana_rpc_url
      - redis_password
    networks:
      - finova-internal
    depends_on:
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # =============================================================================
  # SECURITY SERVICES
  # =============================================================================
  kyc-service:
    image: finova/kyc-service:${FINOVA_VERSION:-latest}
    container_name: finova-kyc-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3010
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - KYC_PROVIDER=jumio
      - BIOMETRIC_PROVIDER=facetec
      - DOCUMENT_VERIFICATION_TIMEOUT=300000
      - FACE_MATCHING_THRESHOLD=0.85
    secrets:
      - postgres_password
      - redis_password
      - kyc_api_credentials
      - biometric_api_credentials
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  fraud-detection:
    image: finova/fraud-detection:${FINOVA_VERSION:-latest}
    container_name: finova-fraud-detection
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/app/models
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - KAFKA_BROKERS=kafka:29092
      - FRAUD_THRESHOLD=0.7
      - REAL_TIME_SCORING=true
      - BATCH_SCORING_INTERVAL=3600
    secrets:
      - postgres_password
      - redis_password
    volumes:
      - ./ai-models/fraud-detection:/app/models:ro
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
      - kafka
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8003/health')"]
      interval: 60s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 6G
        reservations:
          cpus: '1.0'
          memory: 1.5G

  # =============================================================================
  # E-WALLET INTEGRATION
  # =============================================================================
  ewallet-service:
    image: finova/ewallet-service:${FINOVA_VERSION:-latest}
    container_name: finova-ewallet-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3011
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - SUPPORTED_WALLETS=ovo,gopay,dana,shopeepay,linkaja
      - TRANSACTION_TIMEOUT=300000
      - WEBHOOK_RETRY_ATTEMPTS=3
      - ENCRYPTION_ALGORITHM=aes-256-gcm
    secrets:
      - postgres_password
      - redis_password
      - ewallet_api_credentials
      - encryption_key
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # BACKUP & RECOVERY SERVICES
  # =============================================================================
  backup-service:
    image: finova/backup-service:${FINOVA_VERSION:-latest}
    container_name: finova-backup-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=postgres-primary
      - BACKUP_SCHEDULE=0 2 * * *
      - RETENTION_DAYS=30
      - COMPRESSION_LEVEL=9
      - ENCRYPTION_ENABLED=true
      - S3_BUCKET=finova-backups-prod
      - BACKUP_TYPES=database,blockchain,config
    secrets:
      - postgres_password
      - aws_credentials
      - backup_encryption_key
    volumes:
      - backup-storage:/backups
      - postgres-data:/data/postgres:ro
      - redis-data:/data/redis:ro
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3012/health"]
      interval: 60s
      timeout: 15s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.3'
          memory: 512M

  # =============================================================================
  # HEALTH CHECK & STATUS SERVICES
  # =============================================================================
  health-monitor:
    image: finova/health-monitor:${FINOVA_VERSION:-latest}
    container_name: finova-health-monitor
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3013
      - CHECK_INTERVAL=30000
      - ALERT_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - CRITICAL_SERVICES=postgres-primary,redis-cluster,api-gateway,mining-service
      - HEALTH_CHECK_TIMEOUT=10000
    networks:
      - finova-internal
      - finova-monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3013/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M

  # =============================================================================
  # LOG AGGREGATION
  # =============================================================================
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    container_name: finova-logstash
    restart: unless-stopped
    environment:
      - "LS_JAVA_OPTS=-Xmx2g -Xms2g"
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
    volumes:
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    networks:
      - finova-internal
      - finova-monitoring
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '3.0'
          memory: 4G
        reservations:
          cpus: '0.8'
          memory: 1G

  # =============================================================================
  # RATE LIMITING SERVICE
  # =============================================================================
  rate-limiter:
    image: finova/rate-limiter:${FINOVA_VERSION:-latest}
    container_name: finova-rate-limiter
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3014
      - REDIS_HOST=redis-cluster
      - DEFAULT_RATE_LIMIT=1000
      - BURST_RATE_LIMIT=5000
      - WINDOW_SIZE=3600
      - WHITELIST_IPS=${WHITELIST_IPS}
    secrets:
      - redis_password
    networks:
      - finova-internal
    depends_on:
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3014/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # =============================================================================
  # WEBSOCKET SERVICE
  # =============================================================================
  websocket-service:
    image: finova/websocket-service:${FINOVA_VERSION:-latest}
    container_name: finova-websocket-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3015
      - REDIS_HOST=redis-cluster
      - KAFKA_BROKERS=kafka:29092
      - MAX_CONNECTIONS=50000
      - CONNECTION_TIMEOUT=300000
      - HEARTBEAT_INTERVAL=30000
      - ROOM_SIZE_LIMIT=10000
    secrets:
      - redis_password
      - jwt_secret
    networks:
      - finova-network
      - finova-internal
    depends_on:
      - redis-cluster
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3015/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G

  # =============================================================================
  # SCHEDULED JOBS & WORKERS
  # =============================================================================
  job-scheduler:
    image: finova/job-scheduler:${FINOVA_VERSION:-latest}
    container_name: finova-job-scheduler
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - KAFKA_BROKERS=kafka:29092
      - JOBS_CONCURRENCY=10
      - RETRY_ATTEMPTS=3
      - DEAD_LETTER_QUEUE=true
    secrets:
      - postgres_password
      - redis_password
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3016/health"]
      interval: 60s
      timeout: 15s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  mining-worker:
    image: finova/mining-worker:${FINOVA_VERSION:-latest}
    container_name: finova-mining-worker
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - SOLANA_RPC_URL_FILE=/run/secrets/solana_rpc_url
      - WORKER_CONCURRENCY=20
      - BATCH_SIZE=500
      - PROCESSING_INTERVAL=60000
    secrets:
      - postgres_password
      - redis_password
      - solana_rpc_url
      - blockchain_private_key
    networks:
      - finova-internal
    depends_on:
      - postgres-primary
      - redis-cluster
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '3.0'
          memory: 3G
        reservations:
          cpus: '0.8'
          memory: 800M

  # =============================================================================
  # ADMIN & ANALYTICS DASHBOARD
  # =============================================================================
  admin-dashboard:
    image: finova/admin-dashboard:${FINOVA_VERSION:-latest}
    container_name: finova-admin-dashboard
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://admin-api.finova.network
      - NEXT_PUBLIC_SENTRY_DSN=${SENTRY_DSN}
      - ADMIN_SESSION_TIMEOUT=3600
      - MFA_REQUIRED=true
    networks:
      - finova-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 256M

  # =============================================================================
  # EXTERNAL SERVICES MONITORING
  # =============================================================================
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: finova-node-exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - finova-monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: finova-cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    networks:
      - finova-monitoring
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  vulnerability-scanner:
    image: finova/vulnerability-scanner:${FINOVA_VERSION:-latest}
    container_name: finova-vuln-scanner
    restart: unless-stopped
    environment:
      - SCAN_SCHEDULE=0 3 * * *
      - SCAN_TARGETS=api-gateway,mining-service,nft-service
      - SEVERITY_THRESHOLD=medium
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - finova-internal
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

# =============================================================================
# ADDITIONAL SECRETS CONFIGURATION
# =============================================================================
secrets:
  firebase_service_account:
    file: ./secrets/firebase_service_account.json
  apns_certificates:
    file: ./secrets/apns_certificates.p12
  kyc_api_credentials:
    file: ./secrets/kyc_api_credentials.json
  biometric_api_credentials:
    file: ./secrets/biometric_api_credentials.json
  ewallet_api_credentials:
    file: ./secrets/ewallet_api_credentials.json
  encryption_key:
    file: ./secrets/encryption_key.txt
  aws_credentials:
    file: ./secrets/aws_credentials.txt
  backup_encryption_key:
    file: ./secrets/backup_encryption_key.txt

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================
configs:
  nginx_config:
    file: ./nginx/nginx.conf
  prometheus_config:
    file: ./monitoring/prometheus/prometheus.yml
  grafana_config:
    file: ./monitoring/grafana/grafana.ini
  postgres_config:
    file: ./database/config/postgresql.conf
  redis_config:
    file: ./redis/redis.conf
  elasticsearch_config:
    file: ./elasticsearch/config/elasticsearch.yml

# =============================================================================
# HEALTHCHECK DEFINITIONS
# =============================================================================
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

# =============================================================================
# RESOURCE LIMITS DEFAULTS
# =============================================================================
x-resource-defaults: &resource-defaults
  deploy:
    resources:
      limits:
        cpus: '2.0'
        memory: 2G
      reservations:
        cpus: '0.5'
        memory: 512M

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
x-logging-defaults: &logging-defaults
  logging:
    driver: "json-file"
    options:
      max-size: "50m"
      max-file: "5"

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================
x-common-environment: &common-environment
  NODE_ENV: production
  TZ: Asia/Jakarta
  LOG_LEVEL: info
  SENTRY_ENVIRONMENT: production
  NEW_RELIC_ENVIRONMENT: production

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================
# 
# Prerequisites:
# 1. Create required directories:
#    - /opt/finova/data/{postgres,redis,elasticsearch,prometheus,grafana}
#    - /opt/finova/{certs,backups}
# 
# 2. Set up SSL certificates in nginx-certs volume
# 
# 3. Configure secrets in ./secrets/ directory:
#    - postgres_password.txt
#    - redis_password.txt  
#    - jwt_secret.txt
#    - blockchain_private_key.txt
#    - solana_rpc_url.txt
#    - openai_api_key.txt
#    - social_api_keys.json
#    - ssl_cert.pem
#    - ssl_key.pem
#    - firebase_service_account.json
#    - kyc_api_credentials.json
#    - ewallet_api_credentials.json
#    - aws_credentials.txt
#    - encryption_key.txt
#    - backup_encryption_key.txt
# 
# 4. Environment variables to set:
#    - FINOVA_VERSION=latest
#    - SENTRY_DSN=your_sentry_dsn
#    - NEW_RELIC_LICENSE_KEY=your_license_key
#    - GA_TRACKING_ID=your_ga_id
#    - SLACK_WEBHOOK_URL=your_slack_webhook
#    - WHITELIST_IPS=comma_separated_ips
# 
# 5. Deployment commands:
#    docker-compose -f docker-compose.prod.yml up -d
#    docker-compose -f docker-compose.prod.yml logs -f
# 
# 6. Monitoring URLs:
#    - Grafana: https://monitoring.finova.network
#    - Prometheus: https://prometheus.finova.network  
#    - Kibana: https://logs.finova.network
#    - Jaeger: https://tracing.finova.network
# 
# 7. Security considerations:
#    - All services run with non-root users
#    - Network segmentation with internal networks
#    - Secrets management with Docker secrets
#    - Resource limits to prevent DoS
#    - Health checks for automatic recovery
#    - Log rotation and monitoring
# 
# 8. Backup strategy:
#    - Automated daily backups
#    - 30-day retention policy
#    - Encrypted backups stored in S3
#    - Database point-in-time recovery
# 
# 9. Scaling considerations:
#    - API Gateway: 3 replicas with load balancing
#    - Mining Workers: 3 replicas for processing
#    - Database: Primary-replica setup for read scaling
#    - Redis: Cluster mode for high availability
# 
# 10. Performance optimizations:
#     - Connection pooling for databases
#     - Caching strategies with Redis
#     - CDN for static assets
#     - Gzip compression enabled
#     - Keep-alive connections
# 
# =============================================================================
