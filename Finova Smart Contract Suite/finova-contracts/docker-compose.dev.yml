version: '3.8'

services:
  # PostgreSQL Database for development
  postgres-dev:
    image: postgres:15-alpine
    container_name: finova-postgres-dev
    environment:
      POSTGRES_DB: finova_dev
      POSTGRES_USER: finova_dev
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/schema:/docker-entrypoint-initdb.d
    networks:
      - finova-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finova_dev -d finova_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis-dev:
    image: redis:7-alpine
    container_name: finova-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
      - ./config/redis/redis-dev.conf:/usr/local/etc/redis/redis.conf
    networks:
      - finova-dev
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Solana Test Validator
  solana-validator:
    image: solanalabs/solana:v1.16.0
    container_name: finova-solana-validator
    ports:
      - "8899:8899"
      - "8900:8900"
      - "9900:9900"
    volumes:
      - solana_dev_data:/home/solana/.config/solana
      - ./programs:/programs
    networks:
      - finova-dev
    restart: unless-stopped
    command: >
      sh -c "
        solana-test-validator
        --ledger /tmp/test-ledger
        --bind-address 0.0.0.0
        --rpc-bind-address 0.0.0.0
        --rpc-port 8899
        --faucet-port 9900
        --enable-rpc-transaction-history
        --enable-extended-tx-metadata-storage
        --reset
      "
    healthcheck:
      test: ["CMD", "solana", "cluster-version", "--url", "http://localhost:8899"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Backend Development Server
  api-dev:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
      target: development
    container_name: finova-api-dev
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://finova_dev:dev_password_123@postgres-dev:5432/finova_dev
      REDIS_URL: redis://redis-dev:6379
      SOLANA_RPC_URL: http://solana-validator:8899
      JWT_SECRET: dev_jwt_secret_key_very_long_and_secure
      PORT: 3000
    ports:
      - "3000:3000"
      - "9229:9229" # Node.js debugging port
    volumes:
      - ./api:/app
      - ./shared:/app/shared
      - /app/node_modules
    networks:
      - finova-dev
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
      solana-validator:
        condition: service_healthy
    restart: unless-stopped
    command: npm run dev:debug

  # AI Services Development
  ai-services-dev:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.ai-services
      target: development
    container_name: finova-ai-services-dev
    environment:
      ENVIRONMENT: development
      DATABASE_URL: postgresql://finova_dev:dev_password_123@postgres-dev:5432/finova_dev
      REDIS_URL: redis://redis-dev:6379
      API_URL: http://api-dev:3000
      OPENAI_API_KEY: ${OPENAI_API_KEY:-dummy_key}
    ports:
      - "8000:8000"
    volumes:
      - ./ai-services:/app
      - ./shared:/app/shared
      - ai_models_cache:/app/models
    networks:
      - finova-dev
    depends_on:
      - postgres-dev
      - redis-dev
      - api-dev
    restart: unless-stopped
    command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Analytics Development Server
  analytics-dev:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.analytics
      target: development
    container_name: finova-analytics-dev
    environment:
      ENVIRONMENT: development
      DATABASE_URL: postgresql://finova_dev:dev_password_123@postgres-dev:5432/finova_dev
      REDIS_URL: redis://redis-dev:6379
      API_URL: http://api-dev:3000
    ports:
      - "8001:8000"
    volumes:
      - ./analytics:/app
      - ./shared:/app/shared
    networks:
      - finova-dev
    depends_on:
      - postgres-dev
      - redis-dev
    restart: unless-stopped

  # Mobile Backend Development
  mobile-backend-dev:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.mobile-backend
      target: development
    container_name: finova-mobile-backend-dev
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://finova_dev:dev_password_123@postgres-dev:5432/finova_dev
      REDIS_URL: redis://redis-dev:6379
      API_URL: http://api-dev:3000
      PUSH_NOTIFICATION_KEY: ${PUSH_NOTIFICATION_KEY:-dummy_key}
    ports:
      - "3001:3000"
    volumes:
      - ./mobile-backend:/app
      - ./shared:/app/shared
      - /app/node_modules
    networks:
      - finova-dev
    depends_on:
      - postgres-dev
      - redis-dev
      - api-dev
    restart: unless-stopped
    command: npm run dev

  # ElasticSearch for logging and analytics
  elasticsearch-dev:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: finova-elasticsearch-dev
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_dev_data:/usr/share/elasticsearch/data
    networks:
      - finova-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for log visualization
  kibana-dev:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: finova-kibana-dev
    environment:
      ELASTICSEARCH_URL: http://elasticsearch-dev:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch-dev:9200
    ports:
      - "5601:5601"
    networks:
      - finova-dev
    depends_on:
      elasticsearch-dev:
        condition: service_healthy
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus-dev:
    image: prom/prometheus:latest
    container_name: finova-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infrastructure/monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_dev_data:/prometheus
    networks:
      - finova-dev
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana-dev:
    image: grafana/grafana:latest
    container_name: finova-grafana-dev
    environment:
      GF_SECURITY_ADMIN_PASSWORD: dev_admin_password
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3002:3000"
    volumes:
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_dev_data:/var/lib/grafana
    networks:
      - finova-dev
    depends_on:
      - prometheus-dev
    restart: unless-stopped

  # IPFS for NFT metadata storage
  ipfs-dev:
    image: ipfs/go-ipfs:latest
    container_name: finova-ipfs-dev
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_dev_data:/data/ipfs
    networks:
      - finova-dev
    restart: unless-stopped
    environment:
      IPFS_PROFILE: server

  # Nginx reverse proxy for development
  nginx-dev:
    image: nginx:alpine
    container_name: finova-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/dev.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    networks:
      - finova-dev
    depends_on:
      - api-dev
      - ai-services-dev
      - analytics-dev
      - mobile-backend-dev
    restart: unless-stopped

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  solana_dev_data:
    driver: local
  elasticsearch_dev_data:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local
  ipfs_dev_data:
    driver: local
  ai_models_cache:
    driver: local

networks:
  finova-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
        