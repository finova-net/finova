// programs/finova-defi/src/Cargo.toml

[package]
name = "finova-defi"
version = "3.0.0"
description = "Finova Network DeFi Protocol - Advanced AMM, Yield Farming, and Flash Loans"
authors = ["Finova Network Team <dev@finova.network>"]
repository = "https://github.com/finova-network/finova-contracts"
license = "MIT"
edition = "2021"
rust-version = "1.75.0"
keywords = ["defi", "amm", "yield-farming", "flash-loans", "solana"]
categories = ["cryptography::cryptocurrencies", "finance"]
readme = "README.md"
homepage = "https://finova.network"
documentation = "https://docs.finova.network/defi"

[lib]
crate-type = ["cdylib", "lib"]
name = "finova_defi"
path = "lib.rs"

[features]
default = ["mainnet"]
mainnet = []
devnet = ["debug-mode"]
testnet = ["debug-mode"]
debug-mode = []
no-entrypoint = []
test-sbf = []
cpi = ["no-entrypoint"]
testing = ["debug-mode", "test-sbf"]

# Security Features
audit-mode = []
formal-verification = []
circuit-breaker = []
emergency-pause = []

# Performance Features
optimized-math = []
parallel-processing = []
memory-efficient = []

# Integration Features
ethena-integration = []
cross-chain = []
oracle-integration = []

[dependencies]
# Anchor Framework - Core DeFi functionality
anchor-lang = { version = "0.30.1", features = ["init-if-needed", "event-cpi"] }
anchor-spl = { version = "0.30.1", features = ["mint", "token", "associated-token", "metadata"] }

# Solana Program Library
spl-token = { version = "4.0.0", features = ["no-entrypoint"] }
spl-token-2022 = { version = "1.0.0", features = ["no-entrypoint"] }
spl-associated-token-account = { version = "2.3.0", features = ["no-entrypoint"] }
spl-token-metadata = { version = "0.1.3", features = ["no-entrypoint"] }

# Solana Core
solana-program = "1.18.17"
solana-sdk = "1.18.17"
solana-security-txt = "1.1.1"

# Mathematical Libraries for DeFi Calculations
uint = { version = "0.9.5", default-features = false }
num-traits = { version = "0.2.17", default-features = false }
num-integer = { version = "0.1.45", default-features = false }
rust_decimal = { version = "1.33.1", default-features = false, features = ["serde"] }
fixed = { version = "1.24.0", default-features = false }
primitive-types = { version = "0.12.2", default-features = false, features = ["scale-info"] }

# Curve Mathematics for AMM
curve25519-dalek = { version = "4.1.1", default-features = false, features = ["zeroize"] }
ed25519-dalek = { version = "2.0.0", default-features = false, features = ["zeroize"] }

# Cryptographic Libraries
sha2 = { version = "0.10.8", default-features = false }
sha3 = { version = "0.10.8", default-features = false }
blake3 = { version = "1.5.0", default-features = false }
hmac = { version = "0.12.1", default-features = false }
aes-gcm = { version = "0.10.3", default-features = false }

# Serialization
borsh = { version = "1.3.1", features = ["derive"] }
serde = { version = "1.0.193", features = ["derive"] }
serde_json = { version = "1.0.108" }
bincode = "1.3.3"

# Time and Date
chrono = { version = "0.4.31", default-features = false, features = ["serde"] }

# Error Handling
anyhow = "1.0.75"
thiserror = "1.0.50"

# Logging
log = "0.4.20"
env_logger = "0.10.1"

# Memory Management
static_assertions = "1.1.0"
arrayref = "0.3.7"
bytemuck = { version = "1.14.0", features = ["derive"] }

# Oracle Integration
pyth-solana-receiver-sdk = { version = "0.2.5", features = ["solana"] }
switchboard-solana = "0.29.0"

# Cross-Program Invocation Helpers
vipers = "1.1.0"

# Development Dependencies (conditionally included)
[target.'cfg(not(target_arch = "bpf"))'.dependencies]
tokio = { version = "1.35.0", features = ["macros", "rt-multi-thread"] }
reqwest = { version = "0.11.22", features = ["json"] }

[dev-dependencies]
# Testing Framework
solana-program-test = "1.18.17"
solana-validator = "1.18.17"
solana-test-validator = "1.18.17"
anchor-client = "0.30.1"

# Property-based Testing
proptest = "1.4.0"
quickcheck = "1.0.3"

# Benchmarking
criterion = { version = "0.5.1", features = ["html_reports"] }

# Fuzzing
arbitrary = { version = "1.3.2", features = ["derive"] }
honggfuzz = "0.5.56"

# Mock Framework
mockall = "0.12.1"

# Test Utilities
assert_matches = "1.5.0"
pretty_assertions = "1.4.0"

# Async Testing
tokio-test = "0.4.3"
futures = "0.3.29"

[build-dependencies]
anchor-lang-idl = "0.1.1"
vergen = "8.2.6"

[[bin]]
name = "finova-defi-cli"
path = "bin/cli.rs"
required-features = ["testing"]

[[example]]
name = "create_pool"
path = "examples/create_pool.rs"
required-features = ["testing"]

[[example]]
name = "add_liquidity"
path = "examples/add_liquidity.rs"
required-features = ["testing"]

[[example]]
name = "swap_tokens"
path = "examples/swap_tokens.rs"
required-features = ["testing"]

[[example]]
name = "yield_farming"
path = "examples/yield_farming.rs"
required-features = ["testing"]

[[example]]
name = "flash_loan"
path = "examples/flash_loan.rs"
required-features = ["testing"]

[[bench]]
name = "amm_benchmarks"
harness = false
required-features = ["testing"]

[[bench]]
name = "math_benchmarks"
harness = false
required-features = ["testing"]

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
panic = "abort"
opt-level = 3
strip = true

[profile.dev]
debug = true
overflow-checks = true
panic = "abort"
opt-level = 0

[profile.test]
debug = true
overflow-checks = true
opt-level = 0

# Security-focused profile
[profile.security]
inherits = "release"
overflow-checks = true
debug-assertions = true
lto = "fat"
codegen-units = 1
panic = "abort"

# BPF-specific profile for on-chain deployment
[profile.bpf]
inherits = "release"
overflow-checks = true
lto = "thin"
codegen-units = 1
panic = "abort"
opt-level = "z"  # Optimize for size

[workspace]
# This is part of the larger Finova workspace
# Inherit workspace settings from root Cargo.toml

[patch.crates-io]
# Patch dependencies for security updates if needed
# anchor-lang = { git = "https://github.com/coral-xyz/anchor", branch = "master" }

# Metadata for cargo-audit and security scanning
[package.metadata.audit]
# Ignore specific advisories if they don't apply
ignore = []

# Metadata for docs.rs
[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-unknown-linux-gnu"]
rustdoc-args = ["--cfg", "docsrs"]

# Metadata for cargo-deny
[package.metadata.deny]
# Configuration for dependency licensing and security
targets = [
    { triple = "x86_64-unknown-linux-gnu" },
    { triple = "bpfel-unknown-unknown" }
]

# Custom build script configuration
[package.metadata.finova]
program-id = "FinDeFi1111111111111111111111111111111111"
network = "mainnet-beta"
cluster = "https://api.mainnet-beta.solana.com"
commitment = "confirmed"

# IDL generation settings
idl-build = true
idl-spec = "0.1.0"
idl-seeds = true

# Verification settings
verify-build = true
verify-source = true
verify-deployment = true

# Security settings
audit-required = true
formal-verification = false  # Enable for production
circuit-breaker = true
emergency-pause = true

# Performance settings
max-compute-units = 1400000  # Solana CU limit
max-heap-size = 32768       # 32KB heap
stack-size = 4096           # 4KB stack

# Integration settings
cross-program-invocation = true
oracle-feeds = ["pyth", "switchboard"]
supported-tokens = ["USDC", "USDT", "SOL", "FIN", "sFIN", "USDfin"]

# Documentation settings
generate-docs = true
include-examples = true
include-benchmarks = true
include-security-docs = true

# Testing configuration
test-validator = true
test-coverage = true
property-testing = true
fuzz-testing = false  # Enable for comprehensive testing
integration-tests = true

# Deployment configuration
auto-deploy = false
deploy-verification = true
upgrade-authority = true
multisig-required = true

# Monitoring and observability
emit-events = true
detailed-logs = true
performance-metrics = true
security-alerts = true
