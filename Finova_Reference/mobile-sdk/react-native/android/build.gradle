apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 34)
    buildToolsVersion safeExtGet('buildToolsVersion', '34.0.0')
    ndkVersion safeExtGet('ndkVersion', '25.1.8937393')

    namespace 'com.finova.reactnative'

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 23)
        targetSdkVersion safeExtGet('targetSdkVersion', 34)
        versionCode 1
        versionName "1.0.0"
        
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        
        buildConfigField "String", "FINOVA_SDK_VERSION", "\"1.0.0\""
        buildConfigField "String", "SOLANA_NETWORK", "\"mainnet-beta\""
        buildConfigField "boolean", "DEBUG_ENABLED", "false"
        
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        
        manifestPlaceholders = [
            finovaNetworkConfig: "mainnet",
            finovaApiEndpoint: "https://api.finova.network",
            finovaWsEndpoint: "wss://ws.finova.network"
        ]
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "DEBUG_ENABLED", "true"
            buildConfigField "String", "SOLANA_NETWORK", "\"devnet\""
            manifestPlaceholders = [
                finovaNetworkConfig: "devnet",
                finovaApiEndpoint: "https://api-dev.finova.network",
                finovaWsEndpoint: "wss://ws-dev.finova.network"
            ]
            minifyEnabled false
            debuggable true
        }
        
        release {
            buildConfigField "boolean", "DEBUG_ENABLED", "false"
            buildConfigField "String", "SOLANA_NETWORK", "\"mainnet-beta\""
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-rules.pro'
        }
        
        staging {
            initWith debug
            buildConfigField "String", "SOLANA_NETWORK", "\"testnet\""
            manifestPlaceholders = [
                finovaNetworkConfig: "testnet",
                finovaApiEndpoint: "https://api-staging.finova.network",
                finovaWsEndpoint: "wss://ws-staging.finova.network"
            ]
            matchingFallbacks = ['debug']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    
    kotlinOptions {
        jvmTarget = '11'
        freeCompilerArgs += [
            "-opt-in=kotlin.RequiresOptIn",
            "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
            "-opt-in=kotlinx.coroutines.FlowPreview"
        ]
    }

    buildFeatures {
        buildConfig true
        viewBinding true
    }

    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/*.kotlin_module'
    }

    lintOptions {
        disable 'GradleCompatible'
        abortOnError false
        warningsAsErrors false
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    sourceSets {
        main {
            java.srcDirs += 'src/main/kotlin'
        }
        test {
            java.srcDirs += 'src/test/kotlin'
        }
        androidTest {
            java.srcDirs += 'src/androidTest/kotlin'
        }
    }
}

repositories {
    google()
    mavenCentral()
    gradlePluginPortal()
    maven { url "https://www.jitpack.io" }
    maven { url "https://maven.google.com" }
    // Solana Web3.js Android support
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    // React Native and Facebook repositories
    maven { url "https://repo1.maven.org/maven2" }
}

dependencies {
    // React Native Core
    implementation "com.facebook.react:react-native:${safeExtGet('reactNativeVersion', '+')}"
    implementation "com.facebook.react:react-android:${safeExtGet('reactNativeVersion', '+')}"
    
    // Kotlin Standard Library
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${safeExtGet('kotlinVersion', '1.9.10')}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${safeExtGet('coroutinesVersion', '1.7.3')}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${safeExtGet('coroutinesVersion', '1.7.3')}"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${safeExtGet('serializationVersion', '1.6.0')}"
    
    // AndroidX Core Libraries
    implementation "androidx.core:core-ktx:${safeExtGet('androidxCoreVersion', '1.12.0')}"
    implementation "androidx.appcompat:appcompat:${safeExtGet('appCompatVersion', '1.6.1')}"
    implementation "androidx.activity:activity-ktx:${safeExtGet('activityVersion', '1.8.2')}"
    implementation "androidx.fragment:fragment-ktx:${safeExtGet('fragmentVersion', '1.6.2')}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${safeExtGet('lifecycleVersion', '2.7.0')}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${safeExtGet('lifecycleVersion', '2.7.0')}"
    
    // Material Design
    implementation "com.google.android.material:material:${safeExtGet('materialVersion', '1.11.0')}"
    
    // Solana Blockchain Integration
    implementation "org.sol4k:sol4k:0.4.4"
    implementation "com.solana:web3:1.17.0"
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.12.0"
    
    // Cryptography & Security
    implementation "org.bitcoinj:bitcoinj-core:0.16.1"
    implementation "org.bouncycastle:bcprov-jdk15on:1.70"
    implementation "org.bouncycastle:bcpkix-jdk15on:1.70"
    implementation "com.madgag.spongycastle:core:1.58.0.0"
    
    // Network & API
    implementation "com.squareup.retrofit2:retrofit:${safeExtGet('retrofitVersion', '2.9.0')}"
    implementation "com.squareup.retrofit2:converter-gson:${safeExtGet('retrofitVersion', '2.9.0')}"
    implementation "com.squareup.retrofit2:converter-moshi:${safeExtGet('retrofitVersion', '2.9.0')}"
    implementation "com.squareup.moshi:moshi-kotlin:${safeExtGet('moshiVersion', '1.15.0')}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${safeExtGet('moshiVersion', '1.15.0')}"
    
    // WebSocket Support for Real-time Features
    implementation "org.java-websocket:Java-WebSocket:1.5.4"
    implementation "io.socket:socket.io-client:2.1.0"
    
    // Database & Caching
    implementation "androidx.room:room-runtime:${safeExtGet('roomVersion', '2.6.1')}"
    implementation "androidx.room:room-ktx:${safeExtGet('roomVersion', '2.6.1')}"
    kapt "androidx.room:room-compiler:${safeExtGet('roomVersion', '2.6.1')}"
    
    // Shared Preferences Encryption
    implementation "androidx.security:security-crypto:1.1.0-alpha06"
    
    // Biometric Authentication
    implementation "androidx.biometric:biometric:1.1.0"
    
    // Image Processing & QR Codes
    implementation "com.google.zxing:core:3.5.2"
    implementation "com.journeyapps:zxing-android-embedded:4.3.0"
    implementation "com.github.bumptech.glide:glide:4.16.0"
    
    // Wallet Integration Dependencies
    implementation "com.github.trustwallet:wallet-core:3.1.27"
    implementation "com.walletconnect:android-core:1.8.0"
    implementation "com.walletconnect:sign-android:2.7.0"
    
    // Social Media SDK Dependencies
    implementation "com.facebook.android:facebook-android-sdk:16.2.0"
    implementation "com.twitter.twittertext:twitter-text:3.1.0"
    
    // Analytics & Monitoring
    implementation "com.google.firebase:firebase-analytics-ktx:${safeExtGet('firebaseVersion', '21.5.0')}"
    implementation "com.google.firebase:firebase-crashlytics-ktx:${safeExtGet('firebaseVersion', '18.6.1')}"
    implementation "com.google.firebase:firebase-performance-ktx:${safeExtGet('firebaseVersion', '20.5.1')}"
    
    // Dependency Injection
    implementation "com.google.dagger:dagger:${safeExtGet('daggerVersion', '2.48.1')}"
    kapt "com.google.dagger:dagger-compiler:${safeExtGet('daggerVersion', '2.48.1')}"
    implementation "com.google.dagger:dagger-android:${safeExtGet('daggerVersion', '2.48.1')}"
    implementation "com.google.dagger:dagger-android-support:${safeExtGet('daggerVersion', '2.48.1')}"
    kapt "com.google.dagger:dagger-android-processor:${safeExtGet('daggerVersion', '2.48.1')}"
    
    // Work Manager for Background Tasks
    implementation "androidx.work:work-runtime-ktx:${safeExtGet('workVersion', '2.9.0')}"
    
    // Date/Time Handling
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:0.5.0"
    
    // JSON Web Token
    implementation "io.jsonwebtoken:jjwt-api:0.11.5"
    implementation "io.jsonwebtoken:jjwt-impl:0.11.5"
    implementation "io.jsonwebtoken:jjwt-jackson:0.11.5"
    
    // Logging
    implementation "com.jakewharton.timber:timber:5.0.1"
    
    // Testing Dependencies
    testImplementation "junit:junit:${safeExtGet('junitVersion', '4.13.2')}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${safeExtGet('kotlinVersion', '1.9.10')}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${safeExtGet('coroutinesVersion', '1.7.3')}"
    testImplementation "androidx.arch.core:core-testing:${safeExtGet('archTestingVersion', '2.2.0')}"
    testImplementation "org.mockito:mockito-core:${safeExtGet('mockitoVersion', '5.7.0')}"
    testImplementation "org.mockito.kotlin:mockito-kotlin:${safeExtGet('mockitoKotlinVersion', '5.2.1')}"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.12.0"
    
    // Android Testing Dependencies
    androidTestImplementation "androidx.test.ext:junit:${safeExtGet('androidTestJunitVersion', '1.1.5')}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${safeExtGet('espressoVersion', '3.5.1')}"
    androidTestImplementation "androidx.test:runner:${safeExtGet('androidTestRunnerVersion', '1.5.2')}"
    androidTestImplementation "androidx.test:rules:${safeExtGet('androidTestRulesVersion', '1.5.0')}"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${safeExtGet('coroutinesVersion', '1.7.3')}"
}

// Publishing Configuration
publishing {
    publications {
        maven(MavenPublication) {
            from components.release
            
            groupId = 'com.finova.network'
            artifactId = 'react-native-finova-sdk'
            version = '1.0.0'
            
            pom {
                name = 'Finova Network React Native SDK'
                description = 'Official React Native SDK for Finova Network - Social-Fi Super App'
                url = 'https://github.com/finova-network/finova-contracts'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'finova-team'
                        name = 'Finova Network Team'
                        email = 'dev@finova.network'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/finova-network/finova-contracts.git'
                    developerConnection = 'scm:git:ssh://github.com:finova-network/finova-contracts.git'
                    url = 'https://github.com/finova-network/finova-contracts/tree/main'
                }
            }
        }
    }
}

// Custom Gradle Tasks
task generateBuildInfo {
    doLast {
        def buildInfoFile = new File(project.buildDir, 'generated/source/buildConfig/BuildInfo.kt')
        buildInfoFile.parentFile.mkdirs()
        buildInfoFile.text = """
package com.finova.reactnative.generated

object BuildInfo {
    const val VERSION_NAME = "${android.defaultConfig.versionName}"
    const val VERSION_CODE = ${android.defaultConfig.versionCode}
    const val BUILD_TIME = "${new Date().format('yyyy-MM-dd HH:mm:ss')}"
    const val SOLANA_NETWORK = "${android.defaultConfig.buildConfigFields.get('SOLANA_NETWORK').value}"
    const val SDK_VERSION = "${android.defaultConfig.buildConfigFields.get('FINOVA_SDK_VERSION').value}"
}
"""
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generateDebugBuildConfig' || task.name == 'generateReleaseBuildConfig') {
        task.dependsOn generateBuildInfo
    }
}

// Security Configuration
task checkSecurityDependencies {
    doLast {
        configurations.all { config ->
            config.resolutionStrategy.force(
                'com.squareup.okhttp3:okhttp:4.12.0',
                'org.bouncycastle:bcprov-jdk15on:1.70',
                'androidx.security:security-crypto:1.1.0-alpha06'
            )
        }
    }
}

// Clean custom generated files
clean {
    delete "${buildDir}/generated/source/buildConfig/BuildInfo.kt"
}

// Documentation Generation
task generateKotlinDocs(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'html'
    outputDirectory = "$buildDir/docs/kotlin"
    
    configuration {
        moduleName = 'Finova Network React Native SDK'
        includes = ['module.md']
    }
}

// Code Quality Configuration
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

// ProGuard Rules for Release Builds
android.buildTypes.release.proguardFiles.add(file('proguard-rules.pro'))

// Finova Network specific configurations
ext {
    finovaNetworkConfig = [
        mainnet: [
            rpcUrl: "https://api.mainnet-beta.solana.com",
            wsUrl: "wss://api.mainnet-beta.solana.com",
            programIds: [
                core: "FinovaCoreProgram11111111111111111111111111",
                token: "FinovaTokenProgram1111111111111111111111111",
                nft: "FinovaNftProgram111111111111111111111111111",
                defi: "FinovaDefiProgram11111111111111111111111111",
                bridge: "FinovaBridgeProgram111111111111111111111111",
                oracle: "FinovaOracleProgram11111111111111111111111111"
            ]
        ],
        devnet: [
            rpcUrl: "https://api.devnet.solana.com",
            wsUrl: "wss://api.devnet.solana.com",
            programIds: [
                core: "DevFinovaCoreProgram11111111111111111111111",
                token: "DevFinovaTokenProgram1111111111111111111111",
                nft: "DevFinovaNftProgram111111111111111111111111",
                defi: "DevFinovaDefiProgram11111111111111111111111",
                bridge: "DevFinovaBridgeProgram111111111111111111111",
                oracle: "DevFinovaOracleProgram11111111111111111111111"
            ]
        ]
    ]
}
