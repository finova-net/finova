plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id 'maven-publish'
    id 'signing'
}

android {
    namespace 'com.finova.sdk'
    compileSdk 34

    defaultConfig {
        minSdk 21
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        buildConfigField "String", "SDK_VERSION", "\"1.0.0\""
        buildConfigField "String", "SOLANA_RPC_URL", "\"https://api.mainnet-beta.solana.com\""
        buildConfigField "String", "API_BASE_URL", "\"https://api.finova.network/v1\""
        buildConfigField "boolean", "DEBUG_MODE", "false"
    }

    buildTypes {
        debug {
            minifyEnabled false
            buildConfigField "boolean", "DEBUG_MODE", "true"
            buildConfigField "String", "API_BASE_URL", "\"https://api-dev.finova.network/v1\""
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
        freeCompilerArgs += [
            "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
            "-opt-in=kotlinx.serialization.ExperimentalSerializationApi"
        ]
    }

    buildFeatures {
        buildConfig true
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.4"
    }

    packagingOptions {
        resources {
            excludes += ['/META-INF/{AL2.0,LGPL2.1}']
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    // Core Android
    implementation "androidx.core:core-ktx:1.12.0"
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.7.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.7.0"
    implementation "androidx.activity:activity-compose:1.8.2"

    // Material Design
    implementation "com.google.android.material:material:1.10.0"

    // Compose BOM
    implementation platform("androidx.compose:compose-bom:2023.10.01")
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-graphics"
    implementation "androidx.compose.ui:ui-tooling-preview"
    implementation "androidx.compose.material3:material3"
    implementation "androidx.compose.runtime:runtime-livedata"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"

    // Serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0"
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:0.4.1"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.12.0"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:1.0.0"

    // WebSocket
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
    implementation "org.java-websocket:Java-WebSocket:1.5.3"

    // Dependency Injection
    implementation "com.google.dagger:hilt-android:2.48"
    kapt "com.google.dagger:hilt-android-compiler:2.48"

    // Room Database
    implementation "androidx.room:room-runtime:2.6.0"
    implementation "androidx.room:room-ktx:2.6.0"
    kapt "androidx.room:room-compiler:2.6.0"

    // DataStore
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // Work Manager
    implementation "androidx.work:work-runtime-ktx:2.9.0"

    // Security
    implementation "androidx.security:security-crypto:1.1.0-alpha06"
    implementation "androidx.biometric:biometric:1.1.0"

    // Solana SDK
    implementation "com.solanamobile:web3-core:0.2.4"
    implementation "org.bitcoinj:bitcoinj-core:0.16.2"
    implementation "com.google.crypto.tink:tink-android:1.10.0"

    // QR Code
    implementation "com.journeyapps:zxing-android-embedded:4.3.0"
    implementation "com.google.zxing:core:3.5.2"

    // Image Loading
    implementation "io.coil-kt:coil-compose:2.5.0"

    // Charts & Analytics
    implementation "com.github.PhilJay:MPAndroidChart:v3.1.0"

    // Social Media SDKs
    implementation "com.facebook.android:facebook-android-sdk:16.2.0"
    implementation "com.twitter.sdk.android:twitter-core:3.3.0"
    implementation "com.instagram.android:instagram-android-sdk:2.0.2"

    // Logging
    implementation "com.jakewharton.timber:timber:5.0.1"

    // Testing
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-core:5.6.0"
    testImplementation "org.mockito:mockito-inline:5.2.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3"
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation "app.cash.turbine:turbine:1.0.0"

    // Android Testing
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
    androidTestImplementation platform("androidx.compose:compose-bom:2023.10.01")
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"
    
    // Debug Tools
    debugImplementation "androidx.compose.ui:ui-tooling"
    debugImplementation "androidx.compose.ui:ui-test-manifest"
}

// Publishing configuration
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.finova'
            artifactId = 'android-sdk'
            version = '1.0.0'

            afterEvaluate {
                from components.release
            }

            pom {
                name = 'Finova Android SDK'
                description = 'Android SDK for Finova Network Social-Fi Super App'
                url = 'https://github.com/finova-network/finova-android-sdk'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'finova-team'
                        name = 'Finova Development Team'
                        email = 'dev@finova.network'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/finova-network/finova-android-sdk.git'
                    developerConnection = 'scm:git:ssh://github.com:finova-network/finova-android-sdk.git'
                    url = 'https://github.com/finova-network/finova-android-sdk/tree/main'
                }
            }
        }
    }
    
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/finova-network/finova-android-sdk"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

// Signing configuration
signing {
    useGpgCmd()
    sign publishing.publications.maven
}

// Custom tasks
task generateProguardRules {
    doLast {
        def proguardFile = file('proguard-rules.pro')
        proguardFile.text = """
# Finova SDK ProGuard Rules
-keep class com.finova.sdk.** { *; }
-keep interface com.finova.sdk.** { *; }

# Solana Web3 SDK
-keep class com.solanamobile.** { *; }
-dontwarn com.solanamobile.**

# Retrofit & OkHttp
-keepattributes Signature, InnerClasses, EnclosingMethod
-keepattributes RuntimeVisibleAnnotations, RuntimeVisibleParameterAnnotations
-keep,allowshrinking,allowobfuscation interface * {
    @retrofit2.http.* <methods>;
}
-dontwarn org.bouncycastle.**
-dontwarn org.conscrypt.**
-dontwarn org.openjsse.**

# Gson
-keepattributes Signature
-keepattributes *Annotation*
-dontwarn sun.misc.**
-keep class com.google.gson.** { *; }

# Coroutines
-keepnames class kotlinx.coroutines.internal.MainDispatcherFactory {}
-keepnames class kotlinx.coroutines.CoroutineExceptionHandler {}
-keepclassmembernames class kotlinx.** {
    volatile <fields>;
}

# Security
-keep class androidx.security.crypto.** { *; }
"""
    }
}

// Lint configuration
android.lintOptions {
    abortOnError false
    checkReleaseBuilds true
    ignoreWarnings false
    warningsAsErrors false
    
    disable 'GoogleAppIndexingWarning',
            'HardcodedDebugMode',
            'UnusedResources',
            'VectorDrawableCompat'
            
    enable 'LogNotTimber',
           'StringFormatInTimber',
           'ThrowableNotAtBeginning',
           'BinaryOperationInTimber',
           'TimberArgCount',
           'TimberArgTypes',
           'TimberTagLength'
}

// Documentation generation
task generateDocs(type: Exec) {
    workingDir '..'
    commandLine 'dokka'
}

// Code coverage
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.8"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*'
    ]

    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)

    classDirectories.from = files([debugTree, kotlinDebugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
        'jacoco/testDebugUnitTest.exec'
    ])
}
