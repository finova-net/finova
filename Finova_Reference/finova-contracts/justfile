# Finova Network - Modern Command Runner
# Version: 1.0.0
# Description: Enterprise-grade justfile for comprehensive project management
# Usage: just <command> [args]

# Default recipe - shows available commands
default:
    @just --list

# Environment variables with defaults
export RUST_LOG := env_var_or_default("RUST_LOG", "info")
export ANCHOR_PROVIDER_URL := env_var_or_default("ANCHOR_PROVIDER_URL", "https://api.devnet.solana.com")
export SOLANA_CLUSTER := env_var_or_default("SOLANA_CLUSTER", "devnet")
export NODE_ENV := env_var_or_default("NODE_ENV", "development")
export DATABASE_URL := env_var_or_default("DATABASE_URL", "postgresql://localhost:5432/finova_dev")
export REDIS_URL := env_var_or_default("REDIS_URL", "redis://localhost:6379")

# Project information
version := "1.0.0"
project_name := "finova-network"
repo_url := "https://github.com/finova-network/finova-contracts"

# =============================================================================
# SETUP & INSTALLATION
# =============================================================================

# Initial project setup for new developers
setup: install-deps build-all setup-env
    @echo "🚀 Finova Network setup complete!"
    @echo "📖 Read README.md for next steps"
    @echo "🔧 Run 'just dev' to start development environment"

# Install all dependencies
install-deps: install-rust-deps install-node-deps install-python-deps
    @echo "✅ All dependencies installed"

# Install Rust dependencies and tools
install-rust-deps:
    @echo "🦀 Installing Rust dependencies..."
    rustup update stable
    rustup component add rustfmt clippy
    cargo install --force anchor-cli
    cargo install --force solana-cli
    cargo install --force spl-token-cli
    @echo "✅ Rust dependencies installed"

# Install Node.js dependencies
install-node-deps:
    @echo "📦 Installing Node.js dependencies..."
    npm install -g yarn
    yarn install
    @echo "✅ Node.js dependencies installed"

# Install Python dependencies for AI services
install-python-deps:
    @echo "🐍 Installing Python dependencies..."
    pip install --upgrade pip
    pip install poetry
    poetry install
    @echo "✅ Python dependencies installed"

# Setup environment files
setup-env:
    @echo "🔧 Setting up environment files..."
    cp .env.example .env
    @echo "📝 Please configure .env file with your settings"
    @echo "✅ Environment setup complete"

# =============================================================================
# BUILD COMMANDS
# =============================================================================

# Build all components
build-all: build-programs build-client build-mobile build-ai
    @echo "🏗️ All components built successfully"

# Build all Anchor programs
build-programs:
    @echo "🔨 Building Anchor programs..."
    anchor build
    @echo "✅ Programs built successfully"

# Build specific program
build-program program:
    @echo "🔨 Building {{program}} program..."
    cd programs/{{program}} && cargo build-bpf
    @echo "✅ {{program}} built successfully"

# Build client SDKs
build-client: build-typescript-sdk build-rust-sdk build-python-sdk
    @echo "✅ All client SDKs built"

# Build TypeScript SDK
build-typescript-sdk:
    @echo "📦 Building TypeScript SDK..."
    cd client/typescript && yarn build
    @echo "✅ TypeScript SDK built"

# Build Rust SDK
build-rust-sdk:
    @echo "🦀 Building Rust SDK..."
    cd client/rust && cargo build --release
    @echo "✅ Rust SDK built"

# Build Python SDK
build-python-sdk:
    @echo "🐍 Building Python SDK..."
    cd client/python && poetry build
    @echo "✅ Python SDK built"

# Build mobile SDKs
build-mobile: build-ios-sdk build-android-sdk build-react-native-sdk
    @echo "✅ All mobile SDKs built"

# Build iOS SDK
build-ios-sdk:
    @echo "📱 Building iOS SDK..."
    cd mobile-sdk/ios && xcodebuild -scheme FinovaSDK -configuration Release
    @echo "✅ iOS SDK built"

# Build Android SDK
build-android-sdk:
    @echo "🤖 Building Android SDK..."
    cd mobile-sdk/android && ./gradlew build
    @echo "✅ Android SDK built"

# Build React Native SDK
build-react-native-sdk:
    @echo "⚛️ Building React Native SDK..."
    cd mobile-sdk/react-native && yarn build
    @echo "✅ React Native SDK built"

# Build AI services
build-ai:
    @echo "🤖 Building AI services..."
    cd ai-services && docker-compose build
    @echo "✅ AI services built"

# Clean all build artifacts
clean: clean-programs clean-client clean-mobile clean-ai
    @echo "🧹 All build artifacts cleaned"

# Clean program builds
clean-programs:
    @echo "🧹 Cleaning program builds..."
    anchor clean
    rm -rf target/
    @echo "✅ Program builds cleaned"

# Clean client builds
clean-client:
    @echo "🧹 Cleaning client builds..."
    cd client/typescript && rm -rf dist/ node_modules/
    cd client/rust && cargo clean
    cd client/python && rm -rf dist/ build/
    @echo "✅ Client builds cleaned"

# Clean mobile builds
clean-mobile:
    @echo "🧹 Cleaning mobile builds..."
    cd mobile-sdk/ios && rm -rf build/
    cd mobile-sdk/android && ./gradlew clean
    cd mobile-sdk/react-native && rm -rf dist/ node_modules/
    @echo "✅ Mobile builds cleaned"

# Clean AI services
clean-ai:
    @echo "🧹 Cleaning AI services..."
    cd ai-services && docker-compose down --volumes --remove-orphans
    @echo "✅ AI services cleaned"

# =============================================================================
# TESTING
# =============================================================================

# Run all tests
test-all: test-programs test-client test-integration test-security
    @echo "✅ All tests completed successfully"

# Run program tests only
test-programs:
    @echo "🧪 Running program tests..."
    anchor test
    @echo "✅ Program tests completed"

# Run specific program tests
test-program program:
    @echo "🧪 Testing {{program}} program..."
    cd programs/{{program}} && cargo test
    @echo "✅ {{program}} tests completed"

# Run client SDK tests
test-client:
    @echo "🧪 Testing client SDKs..."
    cd client/typescript && yarn test
    cd client/rust && cargo test
    cd client/python && poetry run pytest
    @echo "✅ Client tests completed"

# Run integration tests
test-integration:
    @echo "🧪 Running integration tests..."
    cd tests/integration && yarn test
    @echo "✅ Integration tests completed"

# Run security tests
test-security:
    @echo "🔒 Running security tests..."
    cd tests/security && yarn test
    @echo "✅ Security tests completed"

# Run end-to-end tests
test-e2e:
    @echo "🧪 Running E2E tests..."
    cd tests/e2e && yarn test
    @echo "✅ E2E tests completed"

# Run load tests
test-load:
    @echo "⚡ Running load tests..."
    cd tools/testing/load-testing && k6 run api-load-test.js
    @echo "✅ Load tests completed"

# Run tests with coverage
test-coverage:
    @echo "📊 Running tests with coverage..."
    anchor test --coverage
    cd client/typescript && yarn test --coverage
    cd client/rust && cargo tarpaulin --out Html
    @echo "✅ Coverage tests completed"

# =============================================================================
# DEVELOPMENT
# =============================================================================

# Start development environment
dev: dev-blockchain dev-api dev-ai
    @echo "🚀 Development environment started"
    @echo "🌐 API: http://localhost:3000"
    @echo "🔗 Blockchain: http://localhost:8899"
    @echo "🤖 AI Services: http://localhost:8080"

# Start local blockchain
dev-blockchain:
    @echo "⛓️ Starting local blockchain..."
    solana-test-validator \
        --bpf-program $(anchor keys list | grep finova-core | cut -d' ' -f1) target/deploy/finova_core.so \
        --bpf-program $(anchor keys list | grep finova-token | cut -d' ' -f1) target/deploy/finova_token.so \
        --bpf-program $(anchor keys list | grep finova-nft | cut -d' ' -f1) target/deploy/finova_nft.so \
        --reset \
        --quiet &
    @echo "✅ Local blockchain started on port 8899"

# Start API development server
dev-api:
    @echo "🌐 Starting API server..."
    cd api && yarn dev &
    @echo "✅ API server started on port 3000"

# Start AI services
dev-ai:
    @echo "🤖 Starting AI services..."
    cd ai-services && docker-compose up -d
    @echo "✅ AI services started"

# Stop development environment
dev-stop:
    @echo "🛑 Stopping development environment..."
    pkill -f solana-test-validator || true
    pkill -f "yarn dev" || true
    cd ai-services && docker-compose down
    @echo "✅ Development environment stopped"

# Watch and rebuild on changes
watch component:
    @echo "👀 Watching {{component}} for changes..."
    @case "{{component}}" in \
        "programs") watchexec -w programs "just build-programs" ;; \
        "client") watchexec -w client "just build-client" ;; \
        "api") cd api && yarn dev ;; \
        *) echo "❌ Unknown component: {{component}}" ;; \
    esac

# Format all code
format: format-rust format-typescript format-python
    @echo "✨ All code formatted"

# Format Rust code
format-rust:
    @echo "🦀 Formatting Rust code..."
    cargo fmt --all
    @echo "✅ Rust code formatted"

# Format TypeScript code
format-typescript:
    @echo "📝 Formatting TypeScript code..."
    yarn prettier --write "**/*.{ts,js,json}"
    @echo "✅ TypeScript code formatted"

# Format Python code
format-python:
    @echo "🐍 Formatting Python code..."
    cd ai-services && poetry run black .
    cd ai-services && poetry run isort .
    @echo "✅ Python code formatted"

# Lint all code
lint: lint-rust lint-typescript lint-python
    @echo "🔍 All code linted"

# Lint Rust code
lint-rust:
    @echo "🦀 Linting Rust code..."
    cargo clippy --all-targets --all-features -- -D warnings
    @echo "✅ Rust code linted"

# Lint TypeScript code
lint-typescript:
    @echo "📝 Linting TypeScript code..."
    yarn eslint "**/*.{ts,js}" --fix
    @echo "✅ TypeScript code linted"

# Lint Python code
lint-python:
    @echo "🐍 Linting Python code..."
    cd ai-services && poetry run flake8 .
    cd ai-services && poetry run mypy .
    @echo "✅ Python code linted"

# =============================================================================
# DEPLOYMENT
# =============================================================================

# Deploy to devnet
deploy-devnet: build-programs
    @echo "🚀 Deploying to devnet..."
    anchor deploy --provider.cluster devnet
    @echo "✅ Deployed to devnet successfully"

# Deploy to testnet
deploy-testnet: build-programs
    @echo "🚀 Deploying to testnet..."
    anchor deploy --provider.cluster testnet
    @echo "✅ Deployed to testnet successfully"

# Deploy to mainnet (requires confirmation)
deploy-mainnet: build-programs
    @echo "⚠️  MAINNET DEPLOYMENT - This will deploy to production!"
    @echo "Press Ctrl+C to cancel, or Enter to continue..."
    @read confirm
    anchor deploy --provider.cluster mainnet-beta
    @echo "✅ Deployed to mainnet successfully"

# Deploy API to staging
deploy-api-staging:
    @echo "🌐 Deploying API to staging..."
    cd api && docker build -t finova-api:staging .
    cd infrastructure/kubernetes && kubectl apply -f deployments/api-deployment.yaml
    @echo "✅ API deployed to staging"

# Deploy API to production
deploy-api-production:
    @echo "🌐 Deploying API to production..."
    cd api && docker build -t finova-api:production .
    cd infrastructure/kubernetes && kubectl apply -f deployments/api-deployment.yaml
    @echo "✅ API deployed to production"

# Deploy AI services
deploy-ai environment:
    @echo "🤖 Deploying AI services to {{environment}}..."
    cd ai-services && docker-compose -f docker-compose.{{environment}}.yml up -d
    @echo "✅ AI services deployed to {{environment}}"

# =============================================================================
# DATABASE & MIGRATIONS
# =============================================================================

# Setup database
db-setup:
    @echo "🗄️ Setting up database..."
    createdb finova_dev || true
    createdb finova_test || true
    just db-migrate
    @echo "✅ Database setup complete"

# Run database migrations
db-migrate:
    @echo "🗄️ Running database migrations..."
    cd database/migrations && node migrate.js
    @echo "✅ Database migrations completed"

# Rollback database migration
db-rollback:
    @echo "🔄 Rolling back database migration..."
    cd database/migrations && node rollback.js
    @echo "✅ Database rollback completed"

# Seed database with test data
db-seed:
    @echo "🌱 Seeding database..."
    cd database/seeds && node seed.js
    @echo "✅ Database seeded"

# Reset database (drop, create, migrate, seed)
db-reset:
    @echo "🔄 Resetting database..."
    dropdb finova_dev || true
    dropdb finova_test || true
    just db-setup
    just db-seed
    @echo "✅ Database reset complete"

# Backup database
db-backup:
    @echo "💾 Backing up database..."
    pg_dump finova_dev > backups/finova_dev_$(date +%Y%m%d_%H%M%S).sql
    @echo "✅ Database backup created"

# =============================================================================
# DOCKER & CONTAINERS
# =============================================================================

# Build all Docker images
docker-build:
    @echo "🐳 Building Docker images..."
    docker-compose build
    @echo "✅ Docker images built"

# Start all services with Docker
docker-up:
    @echo "🐳 Starting Docker services..."
    docker-compose up -d
    @echo "✅ Docker services started"

# Stop all Docker services
docker-down:
    @echo "🐳 Stopping Docker services..."
    docker-compose down
    @echo "✅ Docker services stopped"

# View Docker logs
docker-logs service="":
    @if [ "{{service}}" = "" ]; then \
        docker-compose logs -f; \
    else \
        docker-compose logs -f {{service}}; \
    fi

# Clean Docker resources
docker-clean:
    @echo "🧹 Cleaning Docker resources..."
    docker-compose down --volumes --remove-orphans
    docker system prune -f
    @echo "✅ Docker resources cleaned"

# =============================================================================
# SECURITY & AUDITING
# =============================================================================

# Run security audit
security-audit: security-audit-rust security-audit-node security-audit-python
    @echo "🔒 Security audit completed"

# Audit Rust dependencies
security-audit-rust:
    @echo "🔒 Auditing Rust dependencies..."
    cargo audit
    @echo "✅ Rust audit completed"

# Audit Node.js dependencies
security-audit-node:
    @echo "🔒 Auditing Node.js dependencies..."
    yarn audit
    @echo "✅ Node.js audit completed"

# Audit Python dependencies
security-audit-python:
    @echo "🔒 Auditing Python dependencies..."
    cd ai-services && poetry audit
    @echo "✅ Python audit completed"

# Run vulnerability scan
security-scan:
    @echo "🔒 Running vulnerability scan..."
    cd tools/security && ./vulnerability-scan.sh
    @echo "✅ Vulnerability scan completed"

# Generate security report
security-report:
    @echo "📊 Generating security report..."
    cd security/audits && ./generate-report.sh
    @echo "✅ Security report generated"

# =============================================================================
# MONITORING & ANALYTICS
# =============================================================================

# Start monitoring stack
monitoring-start:
    @echo "📊 Starting monitoring stack..."
    cd infrastructure/monitoring && docker-compose up -d
    @echo "✅ Monitoring stack started"
    @echo "📊 Grafana: http://localhost:3001"
    @echo "🔥 Prometheus: http://localhost:9090"

# Stop monitoring stack
monitoring-stop:
    @echo "📊 Stopping monitoring stack..."
    cd infrastructure/monitoring && docker-compose down
    @echo "✅ Monitoring stack stopped"

# View system health
health-check:
    @echo "🏥 Checking system health..."
    curl -f http://localhost:3000/health || echo "❌ API unhealthy"
    curl -f http://localhost:8899/health || echo "❌ Blockchain unhealthy"
    docker ps --filter "status=running" --format "table {{.Names}}\t{{.Status}}"
    @echo "✅ Health check completed"

# Generate analytics report
analytics-report:
    @echo "📈 Generating analytics report..."
    cd tools/analytics && python generate_report.py
    @echo "✅ Analytics report generated"

# =============================================================================
# MAINTENANCE & UTILITIES
# =============================================================================

# Update all dependencies
update-deps: update-rust-deps update-node-deps update-python-deps
    @echo "⬆️ All dependencies updated"

# Update Rust dependencies
update-rust-deps:
    @echo "🦀 Updating Rust dependencies..."
    cargo update
    @echo "✅ Rust dependencies updated"

# Update Node.js dependencies
update-node-deps:
    @echo "📦 Updating Node.js dependencies..."
    yarn upgrade
    @echo "✅ Node.js dependencies updated"

# Update Python dependencies
update-python-deps:
    @echo "🐍 Updating Python dependencies..."
    cd ai-services && poetry update
    @echo "✅ Python dependencies updated"

# Generate documentation
docs-generate:
    @echo "📚 Generating documentation..."
    cargo doc --no-deps --open
    cd client/typescript && yarn docs
    @echo "✅ Documentation generated"

# Serve documentation locally
docs-serve:
    @echo "📚 Serving documentation..."
    cd docs && python -m http.server 8000
    @echo "📚 Documentation available at http://localhost:8000"

# Create new release
release version:
    @echo "🚀 Creating release {{version}}..."
    git tag -a v{{version}} -m "Release {{version}}"
    git push origin v{{version}}
    @echo "✅ Release {{version}} created"

# Show project statistics
stats:
    @echo "📊 Project Statistics"
    @echo "===================="
    @echo "Version: {{version}}"
    @echo "Repository: {{repo_url}}"
    @echo ""
    @echo "Code Statistics:"
    @find . -name "*.rs" -type f | wc -l | sed 's/^/  Rust files: /'
    @find . -name "*.ts" -name "*.js" -type f | wc -l | sed 's/^/  TypeScript\/JS files: /'
    @find . -name "*.py" -type f | wc -l | sed 's/^/  Python files: /'
    @echo ""
    @echo "Lines of Code:"
    @find . -name "*.rs" -type f -exec wc -l {} + | tail -1 | sed 's/^/  Rust: /'
    @find . -name "*.ts" -name "*.js" -type f -exec wc -l {} + | tail -1 | sed 's/^/  TypeScript\/JS: /'
    @find . -name "*.py" -type f -exec wc -l {} + | tail -1 | sed 's/^/  Python: /'

# Show environment information
env-info:
    @echo "🔧 Environment Information"
    @echo "========================="
    @echo "Rust version: $(rustc --version)"
    @echo "Cargo version: $(cargo --version)"
    @echo "Node.js version: $(node --version)"
    @echo "Yarn version: $(yarn --version)"
    @echo "Python version: $(python --version)"
    @echo "Docker version: $(docker --version)"
    @echo "Solana CLI version: $(solana --version)"
    @echo "Anchor CLI version: $(anchor --version)"
    @echo ""
    @echo "Environment Variables:"
    @echo "  SOLANA_CLUSTER: $SOLANA_CLUSTER"
    @echo "  NODE_ENV: $NODE_ENV"
    @echo "  RUST_LOG: $RUST_LOG"

# Help command with detailed usage
help:
    @echo "🚀 Finova Network - Development Commands"
    @echo "========================================"
    @echo ""
    @echo "🔧 Setup & Installation:"
    @echo "  setup           - Complete project setup for new developers"
    @echo "  install-deps    - Install all dependencies"
    @echo ""
    @echo "🏗️ Build Commands:"
    @echo "  build-all       - Build all components"
    @echo "  build-programs  - Build Anchor programs"
    @echo "  build-client    - Build client SDKs"
    @echo "  clean           - Clean all build artifacts"
    @echo ""
    @echo "🧪 Testing:"
    @echo "  test-all        - Run all tests"
    @echo "  test-programs   - Run program tests only"
    @echo "  test-security   - Run security tests"
    @echo ""
    @echo "🚀 Development:"
    @echo "  dev             - Start development environment"
    @echo "  dev-stop        - Stop development environment"
    @echo "  format          - Format all code"
    @echo "  lint            - Lint all code"
    @echo ""
    @echo "🚀 Deployment:"
    @echo "  deploy-devnet   - Deploy to devnet"
    @echo "  deploy-testnet  - Deploy to testnet"
    @echo "  deploy-mainnet  - Deploy to mainnet"
    @echo ""
    @echo "🗄️ Database:"
    @echo "  db-setup        - Setup database"
    @echo "  db-migrate      - Run migrations"
    @echo "  db-seed         - Seed test data"
    @echo ""
    @echo "🔒 Security:"
    @echo "  security-audit  - Run security audit"
    @echo "  security-scan   - Run vulnerability scan"
    @echo ""
    @echo "📊 Monitoring:"
    @echo "  health-check    - Check system health"
    @echo "  monitoring-start - Start monitoring stack"
    @echo ""
    @echo "🛠️ Utilities:"
    @echo "  stats           - Show project statistics"
    @echo "  env-info        - Show environment information"
    @echo "  help            - Show detailed help"
    @echo ""
    @echo "For more commands, run: just --list"
	