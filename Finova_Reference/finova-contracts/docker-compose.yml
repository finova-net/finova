version: '3.8'

services:
  # PostgreSQL Database - Main application database
  postgres:
    image: postgres:15-alpine
    container_name: finova-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: finova_network
      POSTGRES_USER: finova_user
      POSTGRES_PASSWORD: finova_password_2025
      POSTGRES_MULTIPLE_DATABASES: finova_analytics,finova_cache
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema:/docker-entrypoint-initdb.d
    networks:
      - finova-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finova_user -d finova_network"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache - Session management and caching
  redis:
    image: redis:7-alpine
    container_name: finova-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass finova_redis_2025
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - finova-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Solana Test Validator - Local blockchain for development
  solana-validator:
    image: solanalabs/solana:v1.16.0
    container_name: finova-solana-validator
    restart: unless-stopped
    command: >
      solana-test-validator
      --ledger /opt/solana/ledger
      --bind-address 0.0.0.0
      --rpc-bind-address 0.0.0.0
      --rpc-port 8899
      --websocket-port 8900
      --faucet-port 9900
      --enable-rpc-transaction-history
      --enable-extended-tx-metadata-storage
      --clone-upgradeable-program metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s
      --clone-upgradeable-program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
      --clone-upgradeable-program ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL
      --log
    ports:
      - "8899:8899"  # RPC
      - "8900:8900"  # WebSocket
      - "9900:9900"  # Faucet
    volumes:
      - solana_ledger:/opt/solana/ledger
      - ./programs:/opt/solana/programs
    networks:
      - finova-network
    environment:
      - RUST_LOG=solana_runtime::system_instruction_processor=trace,solana_runtime::message_processor=debug,solana_bpf_loader=debug,solana_rbpf=debug
    healthcheck:
      test: ["CMD-SHELL", "solana cluster-version --url http://localhost:8899"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Finova API Backend - Main application server
  finova-api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: development
    container_name: finova-api
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://finova_user:finova_password_2025@postgres:5432/finova_network
      - REDIS_URL=redis://:finova_redis_2025@redis:6379
      - SOLANA_RPC_URL=http://solana-validator:8899
      - SOLANA_WS_URL=ws://solana-validator:8900
      - JWT_SECRET=finova_jwt_secret_key_2025_development
      - PORT=3000
      - LOG_LEVEL=debug
      - CORS_ORIGIN=http://localhost:3001,http://localhost:3002
    volumes:
      - ./api:/app
      - /app/node_modules
      - ./config:/app/config
    networks:
      - finova-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      solana-validator:
        condition: service_healthy
    command: npm run dev

  # AI Content Analyzer Service
  finova-ai-content:
    build:
      context: ./ai-services/content-analyzer
      dockerfile: Dockerfile
    container_name: finova-ai-content
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - PYTHONPATH=/app
      - MODEL_PATH=/app/models
      - REDIS_URL=redis://:finova_redis_2025@redis:6379
      - LOG_LEVEL=INFO
      - WORKER_PROCESSES=2
    volumes:
      - ./ai-services/content-analyzer/models:/app/models
      - ai_models_cache:/app/cache
    networks:
      - finova-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Bot Detection Service
  finova-ai-bot-detection:
    build:
      context: ./ai-services/bot-detection
      dockerfile: Dockerfile
    container_name: finova-ai-bot-detection
    restart: unless-stopped
    ports:
      - "8002:8000"
    environment:
      - PYTHONPATH=/app
      - MODEL_PATH=/app/models
      - REDIS_URL=redis://:finova_redis_2025@redis:6379
      - DATABASE_URL=postgresql://finova_user:finova_password_2025@postgres:5432/finova_analytics
      - LOG_LEVEL=INFO
      - WORKER_PROCESSES=2
    volumes:
      - ./ai-services/bot-detection/models:/app/models
      - ai_models_cache:/app/cache
    networks:
      - finova-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service
  finova-analytics:
    build:
      context: ./ai-services/analytics
      dockerfile: Dockerfile
    container_name: finova-analytics
    restart: unless-stopped
    ports:
      - "8003:8000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://finova_user:finova_password_2025@postgres:5432/finova_analytics
      - REDIS_URL=redis://:finova_redis_2025@redis:6379
      - SOLANA_RPC_URL=http://solana-validator:8899
      - LOG_LEVEL=INFO
      - WORKER_PROCESSES=2
    volumes:
      - ./ai-services/analytics:/app
      - analytics_data:/app/data
    networks:
      - finova-network
    depends_on:
      - postgres
      - redis
      - solana-validator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard - React frontend for development
  finova-dashboard:
    build:
      context: ./client/web
      dockerfile: Dockerfile.dev
    container_name: finova-dashboard
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - REACT_APP_SOLANA_RPC_URL=http://localhost:8899
      - REACT_APP_SOLANA_WS_URL=ws://localhost:8900
      - REACT_APP_ENVIRONMENT=development
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=3001
    volumes:
      - ./client/web:/app
      - /app/node_modules
    networks:
      - finova-network
    depends_on:
      - finova-api
    command: npm start

  # Mobile API Gateway - Specialized endpoints for mobile
  finova-mobile-api:
    build:
      context: ./mobile-api
      dockerfile: Dockerfile
    container_name: finova-mobile-api
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://finova_user:finova_password_2025@postgres:5432/finova_network
      - REDIS_URL=redis://:finova_redis_2025@redis:6379
      - SOLANA_RPC_URL=http://solana-validator:8899
      - MAIN_API_URL=http://finova-api:3000
      - JWT_SECRET=finova_jwt_secret_key_2025_development
      - PORT=3000
      - LOG_LEVEL=debug
    volumes:
      - ./mobile-api:/app
      - /app/node_modules
    networks:
      - finova-network
    depends_on:
      - finova-api
      - postgres
      - redis

  # Nginx - Reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: finova-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - finova-network
    depends_on:
      - finova-api
      - finova-dashboard
      - finova-mobile-api

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: finova-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infrastructure/monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - finova-network

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: finova-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=finova_grafana_2025
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    networks:
      - finova-network
    depends_on:
      - prometheus

  # Elasticsearch - Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: finova-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - finova-network

  # Kibana - Log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: finova-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - finova-network
    depends_on:
      - elasticsearch

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: finova-jaeger
    restart: unless-stopped
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - finova-network

  # MailHog - Email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: finova-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - finova-network

  # MinIO - S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: finova-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=finova_minio_user
      - MINIO_ROOT_PASSWORD=finova_minio_password_2025
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - finova-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # IPFS Node - Decentralized file storage
  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: finova-ipfs
    restart: unless-stopped
    ports:
      - "4001:4001"    # P2P
      - "4001:4001/udp"
      - "5001:5001"    # API
      - "8080:8080"    # Gateway
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - finova-network

  # Development Tools Container
  dev-tools:
    build:
      context: ./tools
      dockerfile: Dockerfile.dev-tools
    container_name: finova-dev-tools
    restart: "no"
    volumes:
      - ./:/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /workspace
    networks:
      - finova-network
    profiles:
      - tools

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  solana_ledger:
    driver: local
  ai_models_cache:
    driver: local
  analytics_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local
  ipfs_data:
    driver: local

# Networks
networks:
  finova-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Health check configurations for development
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s
  